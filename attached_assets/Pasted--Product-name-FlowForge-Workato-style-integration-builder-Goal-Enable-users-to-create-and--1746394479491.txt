## Product name

FlowForge (Workato-style integration builder)

## Goal

Enable users to create and run real automation flows visually.
Each flow connects HTTP-based steps using saved connectors, logic branches (if/else), loops, and testable outputs. All connectors and flows should function with real-world APIs (e.g., Moveworks, Slack, Workday, etc.).

---

## Tech stack

* **Frontend**: React + Vite + TypeScript + TailwindCSS
* **Drag Canvas**: React Flow (for visual drag-and-drop flow building)
* **Backend**: Firebase

  * Firebase Auth (email/password and Google)
  * Firestore (user data, connectors, flows, logs)
  * Firebase Functions (flow execution engine)
  * Cloud Scheduler + Pub/Sub (cron triggers)
* **Hosting**: Firebase Hosting
* **Deploy**: GitHub Actions (CI/CD)

---

## Real HTTP Connector (Required to be usable in Flows)

### Connector Fields:

* Name (string)
* Base URL (e.g. `https://api.example.com/`)
* Authentication Type (dropdown):

  * None
  * Basic Auth → Username + Password
  * OAuth 2 (Client Credentials) →

    * Token URL
    * Client ID
    * Client Secret
    * Token location: Body or Header
    * Header case-sensitivity toggle
* Default headers (key-value) — optional

All connector data must be stored securely in Firestore under `/users/{uid}/connectors/{connectorId}`.

---

## Flow Builder Requirements

### Functional Pieces:

* **HTTP Request Node**

  * Select Connector
  * Method: GET / POST / PUT / DELETE
  * Endpoint Path (append to Base URL)
  * Query params (for GET)
  * Body (for POST/PUT)
  * Allow dynamic variables (e.g., `{{previous_step.result.user_id}}`)
  * **Pass Output**: Output data of this node should be made available as input to downstream nodes automatically via context (`{{stepX.result}}`)

* **IF/ELSE Node**

  * Enter condition (e.g. `{{step1.status}} === 200`)
  * Route flow through true or false branch

* **LOOP Node**

  * Select array from previous step (`{{step2.data.users}}`)
  * Loop exposes `loop.item`

* **SET VARIABLE Node**

  * Set `key` and dynamic `value`

* **LOG Node**

  * Message (supports dynamic fields)
  * Shown in console during test run

* **DELAY / SCHEDULE Node**

  * Enter delay time (seconds) or cron expression
  * Cron mode triggers via Cloud Scheduler

---

## Flow Execution Logic (Cloud Function)

* Function: `runFlow(flowId, inputPayload)`

  1. Fetch flow definition from Firestore
  2. Traverse node-by-node in execution order
  3. Pass step outputs as inputs to next step using shared context
  4. Save status/logs to `/executions/{flowId}/{runId}`
  5. Stop on error, mark downstream as “skipped”
  6. On success: store result, log full execution path

---

## Test Mode (Live)

* In the builder UI, user can press “Test”
* Flow runs immediately with test values
* Bottom console shows:

  * Logs (live)
  * Each node: loading → success/fail
  * Display JSON output inline (expandable)

---

## UI Pages

### 1. Auth Page

* Sign-up / login (Firebase Auth)
* Redirect to dashboard on success
* Support Google OAuth and email/password

### 2. Dashboard

* “+ New Flow” and “+ New Connector” buttons
* List of existing flows and connectors
* Status chips (active, last run success/failure)

### 3. Connectors

* Table view of all saved connectors
* Edit / Delete options
* Preview base URL, auth type
* Create connector modal with full OAuth2, Basic, None options

### 4. Flow Builder

* Left Sidebar: drag nodes (HTTP, IF, LOOP, etc.)
* Center: React Flow canvas (zoom/pan, snap, minimap)
* Right Panel: node settings (react-hook-form)
* Bottom Console: log viewer (monospace, syntax-highlighted)
* Nodes can pass output to any downstream node (e.g., HTTP → IF → LOOP)

### 5. History

* Table with filters: flow name, date, status
* Each row expandable to view raw execution log

---

## Design System

* Tailwind Colors: `slate`, `indigo`, `teal` accent (`#008080`)
* Rounded-2xl cards, shadowed modals
* Dotted curved connectors (`2px stroke-dasharray`, glowing hover)
* Responsive layout (mobile = view-only canvas)
* Dark mode toggle (`localStorage` backed)
* Use `framer-motion` for smooth transitions

---

## Summary (for the AI agent)

Now generate a real production-grade UI + backend where users can:

* Create real API connectors (OAuth2, Basic, None)
* Build flows using real APIs (GET/POST/PUT) and logic steps
* Pass output from one step to any downstream piece
* Test flows and view logs live
* Store runs in Firebase Firestore
* Use Cloud Scheduler for cron-style automation

Generate only code that works. No templates. No dummy placeholders
